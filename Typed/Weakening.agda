module Mono.Typed.Weakening where
open import Mono.Prelude
open import Mono.Untyped.PreTerm
open import Mono.Untyped.Weakening
open import Mono.Untyped.Weakening.Properties
open import Mono.Untyped.Substitution
open import Mono.Untyped.Substitution.Properties
open import Mono.Typed.Term

infix  4 _⊇_∶_
infixr 6 _∙̅_

data _⊇_∶_ : ∀ {𝔪 𝔫} → Con 𝔪 → Ren 𝔪 𝔫 → Con 𝔫 → Set where
  𝕕𝕠𝕟𝕖 : · ⊇ done ∶ ·

  𝕤𝕜𝕚𝕡⁽_⁾ : ∀ {𝔪 𝔫} {Δ : Con 𝔪} {Γ : Con 𝔫} {𝓌 : Ren 𝔪 𝔫} {A : Tm 𝔪}
    → Δ     ⊢      A ∶ U
    → Δ     ⊇      𝓌 ∶ Γ
    → Δ , A ⊇ skip 𝓌 ∶ Γ

  𝕜𝕖𝕖𝕡 : ∀ {𝔪 𝔫} {Δ : Con 𝔪} {Γ : Con 𝔫} {𝓌 : Ren 𝔪 𝔫} {A : Tm 𝔫}
    → Δ            ⊇      𝓌 ∶ Γ
    → Δ , ren⊢ 𝓌 A ⊇ keep 𝓌 ∶ Γ , A

pattern 𝕤𝕜𝕚𝕡 𝕨 = 𝕤𝕜𝕚𝕡⁽ _ ⁾ 𝕨

𝕣𝕖𝕟∋ : ∀ {𝔪 𝔫} {Δ : Con 𝔪} {Γ : Con 𝔫} {𝓌 : Ren 𝔪 𝔫} {A : Tm 𝔫} {x : Var 𝔫}
  → Δ ⊇ 𝓌 ∶ Γ
  → Γ ∋ x ∶ A
  → Δ ∋ ren∋ 𝓌 x ∶ ren⊢ 𝓌 A
𝕣𝕖𝕟∋ 𝕕𝕠𝕟𝕖 ()
𝕣𝕖𝕟∋ {Δ = Δ} (𝕤𝕜𝕚𝕡 𝕨) 𝕩       = 𝕤𝕦𝕔 (𝕣𝕖𝕟∋ 𝕨 𝕩) ⟦ Δ ∋ _ ∶_ ⟨$⟩ ren⊢‿skip _ _ ⟫
𝕣𝕖𝕟∋ {Δ = Δ} (𝕜𝕖𝕖𝕡 𝕨) 𝕫𝕖𝕣𝕠    = 𝕫𝕖𝕣𝕠           ⟦ Δ ∋ _ ∶_ ⟨$⟩ ren⊢‿keep _ _ ⟫
𝕣𝕖𝕟∋ {Δ = Δ} (𝕜𝕖𝕖𝕡 𝕨) (𝕤𝕦𝕔 𝕩) = 𝕤𝕦𝕔 (𝕣𝕖𝕟∋ 𝕨 𝕩) ⟦ Δ ∋ _ ∶_ ⟨$⟩ ren⊢‿keep _ _ ⟫

mutual
  𝕣𝕖𝕟⊢ : ∀ {𝔪 𝔫} {Δ : Con 𝔪} {Γ : Con 𝔫} {𝓌 : Ren 𝔪 𝔫} {A t : Tm 𝔫}
    → Δ ⊇        𝓌 ∶ Γ
    → Γ ⊢        t ∶ A
    → Δ ⊢ ren⊢ 𝓌 t ∶ ren⊢ 𝓌 A
  𝕣𝕖𝕟⊢ 𝕨 (𝕌)               = 𝕌
  𝕣𝕖𝕟⊢ 𝕨 (ℿ 𝔸 𝔹)           = ℿ (𝕣𝕖𝕟⊢ 𝕨 𝔸) (𝕣𝕖𝕟⊢ (𝕜𝕖𝕖𝕡 𝕨) 𝔹)
  𝕣𝕖𝕟⊢ 𝕨 (𝕋)               = 𝕋
  𝕣𝕖𝕟⊢ 𝕨 (𝕧𝕒𝕣 𝕩)           = 𝕧𝕒𝕣 (𝕣𝕖𝕟∋ 𝕨 𝕩)
  𝕣𝕖𝕟⊢ 𝕨 (𝕝𝕒𝕞 𝔸 𝕥)         = 𝕝𝕒𝕞 (𝕣𝕖𝕟⊢ 𝕨 𝔸) (𝕣𝕖𝕟⊢ (𝕜𝕖𝕖𝕡 𝕨) 𝕥)
  𝕣𝕖𝕟⊢ 𝕨 (𝕒𝕡𝕡 {B = B} 𝕥 𝕦) = 𝕒𝕡𝕡 (𝕣𝕖𝕟⊢ 𝕨 𝕥) (𝕣𝕖𝕟⊢ 𝕨 𝕦) ⟦ _ ⊢ _ ∶_ ⟨$⟩ sym (ren⊢‿sub₁ B) ⟫
  𝕣𝕖𝕟⊢ 𝕨 (𝕥𝕥)              = 𝕥𝕥
  𝕣𝕖𝕟⊢ 𝕨 (𝕥 ≫ ℍ)           = 𝕣𝕖𝕟⊢ 𝕨 𝕥 ≫ 𝕣𝕖𝕟∼ 𝕨 ℍ

  𝕣𝕖𝕟∼ : ∀ {𝔪 𝔫} {Δ : Con 𝔪} {Γ : Con 𝔫} {𝓌 : Ren 𝔪 𝔫} {A t₁ t₂ : Tm 𝔫}
    → Δ ⊇                     𝓌 ∶ Γ
    → Γ ⊢        t₁ ∼        t₂ ∶ A
    → Δ ⊢ ren⊢ 𝓌 t₁ ∼ ren⊢ 𝓌 t₂ ∶ ren⊢ 𝓌 A
  𝕣𝕖𝕟∼ 𝕨 (𝕣𝕖𝕗𝕝  𝕥)                = 𝕣𝕖𝕗𝕝  (𝕣𝕖𝕟⊢ 𝕨 𝕥)
  𝕣𝕖𝕟∼ 𝕨 (𝕤𝕪𝕞   𝕡)                = 𝕤𝕪𝕞   (𝕣𝕖𝕟∼ 𝕨 𝕡)
  𝕣𝕖𝕟∼ 𝕨 (𝕥𝕣𝕒𝕟𝕤 𝕡 𝕢)              = 𝕥𝕣𝕒𝕟𝕤 (𝕣𝕖𝕟∼ 𝕨 𝕡) (𝕣𝕖𝕟∼ 𝕨 𝕢)
  𝕣𝕖𝕟∼ 𝕨 (ℿ-𝕔𝕠𝕟𝕘 ℍ₁ ℍ₂)           = ℿ-𝕔𝕠𝕟𝕘 (𝕣𝕖𝕟∼ 𝕨 ℍ₁) (𝕣𝕖𝕟∼ (𝕜𝕖𝕖𝕡 𝕨) ℍ₂)
  𝕣𝕖𝕟∼ 𝕨 (𝕝𝕒𝕞-𝕔𝕠𝕟𝕘 𝔸 𝕡)           = 𝕝𝕒𝕞-𝕔𝕠𝕟𝕘 (𝕣𝕖𝕟⊢ 𝕨 𝔸) (𝕣𝕖𝕟∼ (𝕜𝕖𝕖𝕡 𝕨) 𝕡)
  𝕣𝕖𝕟∼ 𝕨 (𝕒𝕡𝕡-𝕔𝕠𝕟𝕘 {B = B} 𝕡 𝕢)   = 𝕒𝕡𝕡-𝕔𝕠𝕟𝕘 (𝕣𝕖𝕟∼ 𝕨 𝕡) (𝕣𝕖𝕟∼ 𝕨 𝕢) ⟦ _ ⊢ _ ∼ _ ∶_ ⟨$⟩ sym (ren⊢‿sub₁ B) ⟫
  𝕣𝕖𝕟∼ 𝕨 (ℿ-𝕓𝕖𝕥𝕒 {B = B} {t} 𝕥 𝕦) = ℿ-𝕓𝕖𝕥𝕒 (𝕣𝕖𝕟⊢ (𝕜𝕖𝕖𝕡 𝕨) 𝕥) (𝕣𝕖𝕟⊢ 𝕨 𝕦) ⟦ _ ⊢ app _ _ ∼_∶_ ⟨$⟩ sym (ren⊢‿sub₁ t) ⟨*⟩ sym (ren⊢‿sub₁ B) ⟫
  𝕣𝕖𝕟∼ 𝕨 (ℿ-𝕖𝕥𝕒 𝕥)                = ℿ-𝕖𝕥𝕒 (𝕣𝕖𝕟⊢ 𝕨 𝕥) ⟦ (λ t → _ ⊢ ren⊢ _ _ ∼ lam (app t (var zero)) ∶ _) ⟨$⟩ ren⊢‿keep _ _ ⟫
  𝕣𝕖𝕟∼ 𝕨 (𝕋-𝕖𝕥𝕒 𝕥)                = 𝕋-𝕖𝕥𝕒 (𝕣𝕖𝕟⊢ 𝕨 𝕥)
  𝕣𝕖𝕟∼ 𝕨 (𝕡 ≫ ℍ)                  = 𝕣𝕖𝕟∼ 𝕨 𝕡 ≫ 𝕣𝕖𝕟∼ 𝕨 ℍ

𝕣𝕖𝕟✓ : ∀ {𝔪 𝔫} {Δ : Con 𝔪} {Γ : Con 𝔫} {𝓌 : Ren 𝔪 𝔫}
  → Δ ⊇ 𝓌 ∶ Γ
  → Γ ctx
  → Δ ctx
𝕣𝕖𝕟✓ 𝕕𝕠𝕟𝕖          ·       = ·
𝕣𝕖𝕟✓ (𝕤𝕜𝕚𝕡⁽ 𝔸 ⁾ 𝕨) ℾ       = 𝕣𝕖𝕟✓ 𝕨 ℾ , 𝔸
𝕣𝕖𝕟✓ (𝕜𝕖𝕖𝕡      𝕨) (ℾ , 𝔸) = 𝕣𝕖𝕟✓ 𝕨 ℾ , 𝕣𝕖𝕟⊢ 𝕨 𝔸

𝕚𝕕 : ∀ {𝔫} {Γ : Con 𝔫} → Γ ⊇ id ∶ Γ
𝕚𝕕 {Γ = ·}     = 𝕕𝕠𝕟𝕖
𝕚𝕕 {Γ = Γ , A} = 𝕜𝕖𝕖𝕡 𝕚𝕕 ⟦ (λ B → _ , B ⊇ _ ∶ _ , A) ⟨$⟩ ren⊢‿id A ⟫

_∙̅_ : ∀ {𝔩 𝔪 𝔫} {Ε : Con 𝔩} {Δ : Con 𝔪} {Γ : Con 𝔫} {𝓌₁ : Ren 𝔪 𝔫} {𝓌₂ : Ren 𝔩 𝔪}
  → Δ ⊇ 𝓌₁ ∶ Γ
  → Ε ⊇ 𝓌₂ ∶ Δ
  → Ε ⊇ 𝓌₁ ∙ 𝓌₂ ∶ Γ
𝕨₁           ∙̅ 𝕕𝕠𝕟𝕖         = 𝕨₁
𝕨₁           ∙̅ 𝕤𝕜𝕚𝕡⁽ 𝔸 ⁾ 𝕨₂ = 𝕤𝕜𝕚𝕡⁽ 𝔸 ⁾         (𝕨₁ ∙̅ 𝕨₂)
𝕤𝕜𝕚𝕡⁽ 𝔸 ⁾ 𝕨₁ ∙̅ 𝕜𝕖𝕖𝕡      𝕨₂ = 𝕤𝕜𝕚𝕡⁽ 𝕣𝕖𝕟⊢ 𝕨₂ 𝔸 ⁾ (𝕨₁ ∙̅ 𝕨₂)
𝕜𝕖𝕖𝕡      𝕨₁ ∙̅ 𝕜𝕖𝕖𝕡      𝕨₂ = 𝕜𝕖𝕖𝕡              (𝕨₁ ∙̅ 𝕨₂) ⟦ (λ B → _ , B ⊇ _ ∶ _ , _) ⟨$⟩ ren⊢‿∙ _ _ _ ⟫

⇑⁽_⁾ : ∀ {𝔫} {Γ : Con 𝔫} {A : Tm 𝔫}
  → Γ ⊢ A ∶ U
  → Γ , A ⊇ ↑ ∶ Γ
⇑⁽ 𝔸 ⁾ = 𝕤𝕜𝕚𝕡⁽ 𝔸 ⁾ 𝕚𝕕

⦅⇑⁽⁾⦆-syntax : ∀ {𝔫} {Γ : Con 𝔫} {A B t : Tm 𝔫}
  → Γ     ⊢     B ∶ U
  → Γ     ⊢     t ∶ A
  → Γ , B ⊢ t [↑] ∶ A [↑]
⦅⇑⁽⁾⦆-syntax 𝔹 𝕥 = 𝕣𝕖𝕟⊢ ⇑⁽ 𝔹 ⁾ 𝕥

syntax ⦅⇑⁽⁾⦆-syntax 𝔹 𝕥 = 𝕥 ⦅⇑⁽ 𝔹 ⁾⦆
